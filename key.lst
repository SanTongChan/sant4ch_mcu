C51 COMPILER V9.01   KEY                                                                   07/03/2017 18:42:00 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: F:\Program Files\Keil\C51\BIN\C51.EXE code\key\key.c BROWSE INCDIR(.\code\key;.\code\logic;.\code\t
                    -imer;.\code\driver;.\code\led;.\code\common) DEBUG OBJECTEXTEND PRINT(.\key.lst) OBJECT(key.obj)

line level    source

   1          #include "key.h"
   2          #include "key_driver.h"
   3          #include "led.h"
   4          #include "logic.h"
   5          
   6          sbit KEY1 = P1^3;
   7          sbit KEY2 = P1^2;
   8          sbit KEY3 = P1^1;
   9          sbit KEY4 = P1^0;
  10          sbit KEY5 = P1^4;
  11          uint8_t h595_val = 0x0f;
  12          
  13          static bool key1_is_press(void)
  14          {
  15   1          if(0 == KEY1)
  16   1          {
  17   2              return true;
  18   2          }
  19   1          return false;
  20   1      }
  21          static bool key2_is_press(void)
  22          {
  23   1          if(0 == KEY2)
  24   1          {
  25   2              return true;
  26   2          }
  27   1          return false;
  28   1      }
  29          static bool key3_is_press(void)
  30          {
  31   1          if(0 == KEY3)
  32   1          {
  33   2              return true;
  34   2          }
  35   1          return false;
  36   1      }
  37          static bool key4_is_press(void)
  38          {
  39   1          if(0 == KEY4)
  40   1          {
  41   2              return true;
  42   2          }
  43   1          return false;
  44   1      }
  45          static bool key5_is_press(void)
  46          {
  47   1          if(0 == KEY5)
  48   1          {
  49   2              return true;
  50   2          }
  51   1          return false;
  52   1      }
  53          
  54          static void key1_short_press(void)
C51 COMPILER V9.01   KEY                                                                   07/03/2017 18:42:00 PAGE 2   

  55          {
  56   1          if(h595_val | KEY1_595)
  57   1          {
  58   2              h595_val = h595_val & (~KEY1_595);
  59   2                  SendTo595(h595_val);
  60   2          }
  61   1      }
  62          static void key2_short_press(void)
  63          {
  64   1          if(h595_val | KEY2_595)
  65   1          {
  66   2              h595_val = h595_val & (~KEY2_595);
  67   2              SendTo595(h595_val);
  68   2              
  69   2              }
  70   1      }
  71          static void key3_short_press(void)
  72          {   
  73   1          if(h595_val | KEY3_595)
  74   1          {
  75   2              h595_val = h595_val & (~KEY3_595);
  76   2              SendTo595(h595_val);
  77   2              }
  78   1      }
  79          static void key4_short_press(void)
  80          {
  81   1          if(h595_val | KEY4_595)
  82   1          {
  83   2              h595_val = h595_val & (~KEY4_595);
  84   2              SendTo595(h595_val);
  85   2              }
  86   1      }
  87          static void key5_short_press(void)
  88          {
  89   1          
  90   1      }
  91          static void key1_short_up_press(void)
  92          {
  93   1          if(!(h595_val & KEY1_595))
  94   1          {
  95   2              if(RELAY1)
  96   2              {
  97   3                  h595_val &= (~RELAY1_595);
  98   3              }
  99   2              else
 100   2              {
 101   3                  if(dev_def.lock)
 102   3                  {
 103   4                      h595_val &= 0x0f;
 104   4                  }
 105   3                  h595_val |= RELAY1_595;
 106   3              }
 107   2              h595_val |= KEY1_595;
 108   2              SendTo595(h595_val);
 109   2          }
 110   1          dev_def.dev_channel[0].update_flag = true;
 111   1          dev_def.dev_channel[1].update_flag = true;
 112   1          dev_def.dev_channel[2].update_flag = true;
 113   1          dev_def.dev_channel[3].update_flag = true;
 114   1          dev_def.update_local_cnt = 0;
 115   1      }
 116          static void key2_short_up_press(void)
C51 COMPILER V9.01   KEY                                                                   07/03/2017 18:42:00 PAGE 3   

 117          {
 118   1              if(RELAY2)
 119   1          {
 120   2              h595_val &= (~RELAY2_595);
 121   2          }
 122   1          else
 123   1          {
 124   2              if(dev_def.lock)
 125   2              {
 126   3                  h595_val &= 0x0f;
 127   3              }
 128   2              h595_val |= RELAY2_595; 
 129   2          }
 130   1          h595_val |= KEY2_595;
 131   1          SendTo595(h595_val);
 132   1          dev_def.dev_channel[0].update_flag = true;
 133   1          dev_def.dev_channel[1].update_flag = true;
 134   1          dev_def.dev_channel[2].update_flag = true;
 135   1          dev_def.dev_channel[3].update_flag = true;
 136   1          dev_def.update_local_cnt = 0;
 137   1      }
 138          static void key3_short_up_press(void)
 139          {
 140   1              if(RELAY3)
 141   1          {
 142   2              h595_val &= (~RELAY3_595);
 143   2          }
 144   1          else
 145   1          {
 146   2              if(dev_def.lock)
 147   2              {
 148   3                  h595_val &= 0x0f;
 149   3              }
 150   2              h595_val |= RELAY3_595;
 151   2              
 152   2          }
 153   1          h595_val |= KEY3_595;
 154   1          SendTo595(h595_val);
 155   1          dev_def.dev_channel[0].update_flag = true;
 156   1          dev_def.dev_channel[1].update_flag = true;
 157   1          dev_def.dev_channel[2].update_flag = true;
 158   1          dev_def.dev_channel[3].update_flag = true;
 159   1          dev_def.update_local_cnt = 0;
 160   1      }
 161          static void key4_short_up_press(void)
 162          {
 163   1              if(RELAY4)
 164   1          {
 165   2              h595_val &= (~RELAY4_595);
 166   2              
 167   2          }
 168   1          else
 169   1          {
 170   2              if(dev_def.lock)
 171   2              {
 172   3                  h595_val &= 0x0f;
 173   3              }
 174   2              h595_val |= RELAY4_595;
 175   2          }
 176   1          h595_val |= KEY4_595;
 177   1          SendTo595(h595_val);
 178   1          dev_def.dev_channel[0].update_flag = true;
C51 COMPILER V9.01   KEY                                                                   07/03/2017 18:42:00 PAGE 4   

 179   1          dev_def.dev_channel[1].update_flag = true;
 180   1          dev_def.dev_channel[2].update_flag = true;
 181   1          dev_def.dev_channel[3].update_flag = true;
 182   1          dev_def.update_local_cnt = 0;
 183   1      }
 184          static void key1_long_up_press(void)
 185          {
 186   1          h595_val |= KEY1_595;
 187   1          SendTo595(h595_val);
 188   1      }
 189          static void key2_long_up_press(void)
 190          {
 191   1              h595_val |= KEY2_595;
 192   1              SendTo595(h595_val);
 193   1      }
 194          static void key3_long_up_press(void)
 195          {
 196   1              h595_val |= KEY3_595;
 197   1              SendTo595(h595_val);
 198   1      }
 199          static void key4_long_up_press(void)
 200          {
 201   1              h595_val |= KEY4_595;
 202   1              SendTo595(h595_val);
 203   1      }
 204          
 205          static void registerKeys(void)
 206          {
 207   1          keyRegisterSingle(key1_is_press,key1_short_press,key1_short_up_press,NULL,key1_long_up_press,NULL);
 208   1          keyRegisterSingle(key2_is_press,key2_short_press,key2_short_up_press,NULL,key2_long_up_press,NULL);
 209   1          keyRegisterSingle(key3_is_press,key3_short_press,key3_short_up_press,NULL,key3_long_up_press,NULL);
 210   1          keyRegisterSingle(key4_is_press,key4_short_press,key4_short_up_press,NULL,key4_long_up_press,NULL);
 211   1          keyRegisterSingle(key5_is_press,key5_short_press,NULL,NULL,NULL,NULL);
 212   1      }
 213          void keyInit(void)
 214          {
 215   1              P1M1 |= 0x1f;//初始化P10 -> P14为输入
 216   1              P1M2 &= 0Xe0;
 217   1              registerKeys();
 218   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    630    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
