C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LOGIC
OBJECT MODULE PLACED IN logic.obj
COMPILER INVOKED BY: F:\Program Files\Keil\C51\BIN\C51.EXE code\logic\logic.c BROWSE INCDIR(.\code\key;.\code\logic;.\co
                    -de\timer;.\code\driver;.\code\led;.\code\common;.\code\flash;.\code\remote) DEBUG OBJECTEXTEND PRINT(.\logic.lst) OBJECT
                    -(logic.obj)

line level    source

   1          #include <intrins.h>
   2          #include "logic.h"
   3          #include "N76E003.h"
   4          #include "key.h"
   5          #include "led.h"
   6          #include "timer.h"
   7          #include "key_driver.h"
   8          #include "flash.h"
   9          #include "remote.h"
  10          
  11          sbit RCK = P1^7;
  12          sbit SCK = P1^6;
  13          sbit SER = P3^0;
  14          
  15          bool key_scan_flag = false;
  16          bool update_local_flag = false;
  17          bool syn_app_flag = false;
  18          bool save_mode_flag = false;
  19          bool deal_remote_flag = false;
  20          bool remote_led_study = false;
  21          uint8_t remote_led_blink = 0;
  22          uint8_t update_time = 5;
  23          
  24          uint8_t code relay_array[4] = {0x80,0x40,0x20,0x10};
  25          uint8_t code key_array[4] = {0x04,0x02,0x01,0x08};
  26          
  27          DevDef xdata dev_def = {0};
  28          static void h595Init(void)
  29          {
  30   1          //初始化P16 P17 P30为推挽输出
  31   1          P1M1 &= 0x3f;
  32   1              P1M2 |= 0Xc0;
  33   1              P3M1 &= 0xfe;
  34   1          P3M2 |= 0x01;
  35   1          SER = 1;
  36   1      }
  37          static void relayInit(void)
  38          {
  39   1          P0M1 |= 0x0f;//初始化relay脚 P00 -> P03     为输入
  40   1              P0M2 &= 0Xf0;  
  41   1      }
  42          static void syncApp(void)
  43          {
  44   1          uint8_t last_key = h595_val;
  45   1          uint8_t relays[4] = {0};
  46   1          uint8_t i = 0;
  47   1          relays[0] = RELAY1;
  48   1          relays[1] = RELAY2;
  49   1          relays[2] = RELAY3;
  50   1          relays[3] = RELAY4;
  51   1          if(dev_def.lock)
  52   1          {
  53   2              static uint8_t lock_channel = 0;
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 2   

  54   2              static uint8_t last_lock_channel = 0;
  55   2              static uint8_t last_relay_val[4] = {0};
  56   2              if(dev_def.dev_channel[0].update_flag 
  57   2                  || dev_def.dev_channel[1].update_flag 
  58   2                  || dev_def.dev_channel[2].update_flag
  59   2                  || dev_def.dev_channel[3].update_flag)
  60   2              {
  61   3                  return;
  62   3              }
  63   2              for(i = 0; i < 4;i++)
  64   2              {
  65   3                  if(relays[i] != last_relay_val[i] && relays[i] == 1)
  66   3                  {
  67   4                      lock_channel = i + 1;
  68   4                  }
  69   3                  last_relay_val[i] = relays[i];
  70   3              }
  71   2              if(last_lock_channel != lock_channel)
  72   2              {
  73   3                  last_lock_channel = lock_channel;
  74   3                  for(i = 0; i < 4; i++)
  75   3                  {
  76   4                      if(lock_channel == (i + 1))
  77   4                      {
  78   5                          h595_val &= 0x0f;
  79   5                          h595_val |= relay_array[i];
  80   5                      }
  81   4                  }
  82   3                  dev_def.dev_channel[0].update_flag = true;
  83   3                  dev_def.dev_channel[1].update_flag = true;
  84   3                  dev_def.dev_channel[2].update_flag = true;
  85   3                  dev_def.dev_channel[3].update_flag = true;
  86   3                  dev_def.update_local_cnt = 0;
  87   3                  dev_def.setting = false;
  88   3                  update_time = 5;
  89   3              }
  90   2              else
  91   2              {
  92   3                  if(relays[lock_channel - 1])
  93   3                  {
  94   4                      if(!(h595_val & relay_array[lock_channel - 1]))
  95   4                      {
  96   5                          h595_val |= relay_array[lock_channel - 1];
  97   5                          dev_def.dev_channel[0].update_flag = true;
  98   5                          dev_def.dev_channel[1].update_flag = true;
  99   5                          dev_def.dev_channel[2].update_flag = true;
 100   5                          dev_def.dev_channel[3].update_flag = true;
 101   5                          dev_def.update_local_cnt = 0;
 102   5                          dev_def.setting = false;
 103   5                          update_time = 5;
 104   5                      }
 105   4                     
 106   4                  }
 107   3                  else
 108   3                  {
 109   4                      if(h595_val & relay_array[lock_channel - 1])
 110   4                      {
 111   5                          h595_val &= ~relay_array[lock_channel - 1];
 112   5                          dev_def.dev_channel[0].update_flag = true;
 113   5                          dev_def.dev_channel[1].update_flag = true;
 114   5                          dev_def.dev_channel[2].update_flag = true;
 115   5                          dev_def.dev_channel[3].update_flag = true;
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 3   

 116   5                          dev_def.update_local_cnt = 0;
 117   5                          dev_def.setting = false;
 118   5                          update_time = 5;
 119   5                      }
 120   4                  }
 121   3              }
 122   2          }
 123   1          else
 124   1          {
 125   2              for(i =  0; i < 4; i++)
 126   2              {
 127   3                  if(dev_def.dev_channel[i].channel_mode == DEV_JOGGING)
 128   3                  {
 129   4                      dev_def.dev_channel[i].timer_cnt++;
 130   4                      if((h595_val & relay_array[i]))//如果relay1是按下的
 131   4                      {
 132   5                          if(dev_def.dev_channel[i].get_status == false)
 133   5                          {
 134   6                              dev_def.dev_channel[i].timer_cnt = 0;
 135   6                              dev_def.dev_channel[i].get_status = true;
 136   6                          }
 137   5                          if(dev_def.dev_channel[i].timer_cnt >= 7)
 138   5                          {
 139   6                              dev_def.dev_channel[i].timer_cnt = 0;
 140   6                              dev_def.dev_channel[i].get_status = false;
 141   6                              h595_val &= (~relay_array[i]);//关掉relay1
 142   6                              dev_def.dev_channel[i].update_flag = true;//允许更新标志位
 143   6                              dev_def.update_local_cnt = 0;
 144   6                              dev_def.setting = false;
 145   6                              update_time = 5;
 146   6                          }
 147   5                      }
 148   4                  }
 149   3                  if(!dev_def.dev_channel[i].update_flag)
 150   3                  {
 151   4                      if(relays[i])
 152   4                      {
 153   5                          h595_val |= relay_array[i];
 154   5                      }
 155   4                      else
 156   4                      {
 157   5                          h595_val &= (~relay_array[i]);
 158   5                      }
 159   4                  }
 160   3              }
 161   2          }
 162   1          if(h595_val != last_key)
 163   1          {
 164   2              SendTo595(h595_val);
 165   2          }
 166   1      }
 167          static void updateLocal(void)
 168          {
 169   1          static bool high_flag[4] = {false};
 170   1          uint8_t i = 0;
 171   1          uint8_t last_key = h595_val;
 172   1          uint8_t relays[4] = {0};
 173   1          dev_def.update_local_cnt++;
 174   1          if(dev_def.update_local_cnt == update_time)
 175   1          {
 176   2              relays[0] = (uint8_t)RELAY1;
 177   2              relays[1] = (uint8_t)RELAY2;
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 4   

 178   2              relays[2] = (uint8_t)RELAY3;
 179   2              relays[3] = (uint8_t)RELAY4;
 180   2              for(i = 0; i < 4; i++)
 181   2              {
 182   3                  if(dev_def.dev_channel[i].update_flag)
 183   3                  {
 184   4                      if((relays[i] << (7 - i)) != (h595_val & relay_array[i]))
 185   4                      {
 186   5                          high_flag[i] = true;
 187   5                          h595_val &= ~key_array[i];
 188   5                      }
 189   4                      else
 190   4                      {
 191   5                          dev_def.dev_channel[i].update_flag = false;
 192   5                      }
 193   4                  }
 194   3              }
 195   2              if(h595_val != last_key)
 196   2              {
 197   3                  SendTo595(h595_val);
 198   3              }
 199   2          }
 200   1          else if(dev_def.update_local_cnt >= update_time + 1)
 201   1          {
 202   2              dev_def.update_local_cnt = 0;
 203   2              for(i = 0; i < 4; i++)
 204   2              {
 205   3                  if(high_flag[i] == true)
 206   3                  {
 207   4                      h595_val |= key_array[i];
 208   4                      high_flag[i] = false;
 209   4                  }
 210   3              }
 211   2              if(h595_val != last_key)
 212   2              {
 213   3                  SendTo595(h595_val);
 214   3              }
 215   2          }
 216   1      
 217   1          
 218   1      }
 219          void dealLogic(void)
 220          {
 221   1          if(key_scan_flag)
 222   1          {
 223   2              key_scan_flag = false;
 224   2              keyScan();
 225   2          }
 226   1          if(syn_app_flag)
 227   1          {
 228   2              syn_app_flag = false;
 229   2              syncApp();
 230   2          }
 231   1          if(update_local_flag)
 232   1          {
 233   2              update_local_flag = false;
 234   2              updateLocal();//要在同步APP之后
 235   2          }
 236   1      }
 237          void saveModeToFlash(void)
 238          {
 239   1          if(save_mode_flag)
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 5   

 240   1          {
 241   2                      flash_data[0] = dev_def.lock;
 242   2                      flash_data[1] = (uint8_t)dev_def.dev_channel[0].channel_mode;
 243   2                      flash_data[2] = (uint8_t)dev_def.dev_channel[1].channel_mode;
 244   2                      flash_data[3] = (uint8_t)dev_def.dev_channel[2].channel_mode;
 245   2                      flash_data[4] = (uint8_t)dev_def.dev_channel[3].channel_mode;
 246   2                      flash_data[5] = (uint8_t)(dev_def.dev_channel[0].remote_val >> 16);
 247   2                      flash_data[6] = (uint8_t)(dev_def.dev_channel[0].remote_val >> 8);
 248   2                      flash_data[7] = (uint8_t)dev_def.dev_channel[0].remote_val;
 249   2                      flash_data[8] = (uint8_t)(dev_def.dev_channel[1].remote_val >> 16);
 250   2                      flash_data[9] = (uint8_t)(dev_def.dev_channel[1].remote_val >> 8);
 251   2                      flash_data[10] = (uint8_t)dev_def.dev_channel[1].remote_val;
 252   2                      flash_data[11] = (uint8_t)(dev_def.dev_channel[2].remote_val >> 16);
 253   2                      flash_data[12] = (uint8_t)(dev_def.dev_channel[2].remote_val >> 8);
 254   2                      flash_data[13] = (uint8_t)dev_def.dev_channel[2].remote_val;
 255   2                      flash_data[14] = (uint8_t)(dev_def.dev_channel[3].remote_val >> 16);
 256   2                      flash_data[15] = (uint8_t)(dev_def.dev_channel[3].remote_val >> 8);
 257   2                      flash_data[16] = (uint8_t)dev_def.dev_channel[3].remote_val;
 258   2                      flashWrite();
 259   2                      save_mode_flag = false;
 260   2          }
 261   1      }
 262          static void dealRemoteModeLed(void)
 263          {
 264   1          static uint8_t remote_led_cnt = 0;
 265   1          remote_led_cnt++;
 266   1          if(dev_def.remote)
 267   1              {
 268   2              if(remote_led_cnt >= 100)
 269   2              {
 270   3                  remote_led_cnt = 0;
 271   3                  MODE_LED = !MODE_LED;
 272   3              }
 273   2              }
 274   1              else
 275   1              {
 276   2              if(dev_def.lock)
 277   2              {
 278   3                  MODE_LED = 1;
 279   3              }
 280   2              else
 281   2              {
 282   3                  MODE_LED = 0;
 283   3              }
 284   2              }
 285   1      }
 286          void dealRemoteStudyLed(void)
 287          {
 288   1          static uint8_t cnt = 0;
 289   1          cnt++;
 290   1          if(cnt >= 100 && remote_led_study)
 291   1          {
 292   2              cnt = 0;
 293   2              if(RF_LED)
 294   2              {
 295   3                  RF_LED = 0;
 296   3                  remote_led_blink++;
 297   3              }
 298   2              else
 299   2              {
 300   3                  RF_LED = 1;
 301   3              }
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 6   

 302   2          }
 303   1          if((remote_led_blink >= 4) && remote_led_study)
 304   1          {
 305   2              RF_LED = 0;
 306   2              remote_led_blink = 0;
 307   2              remote_led_study = false;
 308   2          }
 309   1      }
 310          void dealRemoteNormalLed(void)
 311          {
 312   1          static uint8_t cnt = 0;
 313   1          cnt++;
 314   1          if(!dev_def.remote 
 315   1          && (ir_data.ir_data == dev_def.dev_channel[1].remote_val
 316   1          || ir_data.ir_data == dev_def.dev_channel[0].remote_val
 317   1          || ir_data.ir_data == dev_def.dev_channel[2].remote_val
 318   1          || ir_data.ir_data == dev_def.dev_channel[3].remote_val)
 319   1          )
 320   1          {
 321   2              if(ir_data.cnt > 0 && cnt >= 15)
 322   2              {
 323   3                  cnt = 0;
 324   3                  RF_LED = !RF_LED;
 325   3              }
 326   2              if(ir_data.timer_cnt >= 100)
 327   2              {
 328   3                  RF_LED = 0;
 329   3              }
 330   2          }
 331   1      }
 332          void dealRemoteLed(void)
 333          {
 334   1          dealRemoteModeLed();
 335   1              dealRemoteStudyLed();
 336   1              dealRemoteNormalLed();
 337   1      }
 338          void dealRemoteStudy(void)
 339          {
 340   1          if(dev_def.remote_channel != 0 && dev_def.remote)
 341   1          {
 342   2              if(ir_data.cnt == 10)
 343   2              {
 344   3                  remote_led_study = true;
 345   3                  remote_led_blink = 0;
 346   3                  RF_LED = 0;
 347   3              }
 348   2              if(ir_data.cnt >= 10 && ir_data.timer_cnt >= 150)
 349   2              {
 350   3                  //ir_data.cnt = 0;
 351   3                  dev_def.dev_channel[dev_def.remote_channel - 1].remote_val = ir_data.ir_data;
 352   3                  clearIrData();
 353   3                  dev_def.remote_channel = 0;
 354   3              }
 355   2          }
 356   1      }
 357          void dealRemoteNormal(void)
 358          {
 359   1          static uint16_t cnt = 0;
 360   1          uint8_t i = 0;
 361   1              uint8_t relays[4] = {0};
 362   1          cnt++;
 363   1          if(!dev_def.remote)
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 7   

 364   1          {
 365   2              relays[0] = RELAY1;
 366   2              relays[1] = RELAY2;
 367   2              relays[2] = RELAY3;
 368   2              relays[3] = RELAY4;
 369   2              if(ir_data.cnt == 1)
 370   2              {
 371   3                  for(i = 0; i < 4; i++)
 372   3                  {
 373   4                      if(ir_data.ir_data == dev_def.dev_channel[i].remote_val)
 374   4                      {
 375   5                          h595_val |= 0x0f;
 376   5                          h595_val &= (~key_array[i]);
 377   5                          dev_def.remote_channel = i + 1;
 378   5                          SendTo595(h595_val);   
 379   5                          cnt = 0;
 380   5                      }
 381   4                  }
 382   3              }
 383   2              if(ir_data.timer_cnt >= 150 && ir_data.cnt >= 1
 384   2              && ir_data.ir_data == dev_def.dev_channel[dev_def.remote_channel - 1].remote_val)
 385   2              {
 386   3                  h595_val |= 0x0f;
 387   3                  if(cnt <= 2500)
 388   3                  {
 389   4                      if(relays[dev_def.remote_channel - 1])
 390   4                      {
 391   5                          h595_val &= (~relay_array[dev_def.remote_channel - 1]);    
 392   5                      }
 393   4                      else
 394   4                      {
 395   5                          if(dev_def.lock)
 396   5                          {
 397   6                              h595_val &= 0x0f;
 398   6                          }
 399   5                          h595_val |= relay_array[dev_def.remote_channel - 1] ;
 400   5                      }
 401   4                      dev_def.remote_channel = 0;
 402   4                      dev_def.dev_channel[0].update_flag = true;
 403   4                      dev_def.dev_channel[1].update_flag = true;
 404   4                      dev_def.dev_channel[2].update_flag = true;
 405   4                      dev_def.dev_channel[3].update_flag = true;
 406   4                      dev_def.update_local_cnt = 0;
 407   4                      update_time = 10;
 408   4                  }
 409   3                  SendTo595(h595_val);
 410   3                  clearIrData();
 411   3              }
 412   2          }
 413   1      }
 414          void dealRemote(void)
 415          {
 416   1              if(deal_remote_flag)
 417   1              {
 418   2                      deal_remote_flag = false;
 419   2                      analyzeRfData();
 420   2                      dealRemoteLed();
 421   2                      dealRemoteStudy();
 422   2                      dealRemoteNormal();
 423   2              }
 424   1      }
 425          static void modeInit(void)
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 8   

 426          {
 427   1              flashRead();
 428   1              dev_def.lock = flash_data[0];
 429   1              dev_def.dev_channel[0].channel_mode = flash_data[1];
 430   1              dev_def.dev_channel[1].channel_mode = flash_data[2];
 431   1              dev_def.dev_channel[2].channel_mode = flash_data[3];
 432   1              dev_def.dev_channel[3].channel_mode = flash_data[4];
 433   1              dev_def.dev_channel[0].remote_val = 
 434   1                      (uint32_t)flash_data[5] << 16
 435   1                      | (uint32_t)flash_data[6] << 8 
 436   1                      | flash_data[7];
 437   1          dev_def.dev_channel[1].remote_val = 
 438   1                  (uint32_t)flash_data[8] << 16 
 439   1                  | (uint32_t)flash_data[9] << 8 
 440   1                  | flash_data[10];
 441   1          dev_def.dev_channel[2].remote_val = 
 442   1                  (uint32_t)flash_data[11] << 16 
 443   1                  | (uint32_t)flash_data[12] << 8 
 444   1                  | flash_data[13];
 445   1          dev_def.dev_channel[3].remote_val = 
 446   1                  (uint32_t)flash_data[14] << 16 
 447   1                  | (uint32_t)flash_data[15] << 8 
 448   1                  | flash_data[16];
 449   1          if(dev_def.lock == 0xff 
 450   1              || dev_def.dev_channel[0].channel_mode == 0xff
 451   1              || dev_def.dev_channel[1].channel_mode == 0xff
 452   1              || dev_def.dev_channel[2].channel_mode == 0xff
 453   1              || dev_def.dev_channel[3].channel_mode == 0xff
 454   1              || dev_def.dev_channel[0].remote_val == 0xffffff
 455   1              || dev_def.dev_channel[1].remote_val == 0xffffff
 456   1              || dev_def.dev_channel[2].remote_val == 0xffffff
 457   1              || dev_def.dev_channel[3].remote_val == 0xffffff)
 458   1          {
 459   2              dev_def.lock = false;
 460   2              dev_def.dev_channel[0].channel_mode = DEV_SELFLOCK;
 461   2              dev_def.dev_channel[1].channel_mode = DEV_SELFLOCK;
 462   2              dev_def.dev_channel[2].channel_mode = DEV_SELFLOCK;
 463   2              dev_def.dev_channel[3].channel_mode = DEV_SELFLOCK;
 464   2              dev_def.dev_channel[0].remote_val = 0x0;
 465   2              dev_def.dev_channel[1].remote_val = 0x0;
 466   2              dev_def.dev_channel[2].remote_val = 0x0;
 467   2              dev_def.dev_channel[3].remote_val = 0x0;
 468   2          }
 469   1          if(dev_def.lock)
 470   1          {
 471   2              MODE_LED = 1;
 472   2          }
 473   1          else
 474   1          {
 475   2              MODE_LED = 0;
 476   2          }
 477   1      }
 478          void logicInit(void)
 479          {
 480   1          modeInit();
 481   1          h595Init();
 482   1          SendTo595(0x0f);
 483   1          ledInit();   
 484   1              keyInit();
 485   1          relayInit();
 486   1      #if 1
 487   1              captureInit();
C51 COMPILER V9.01   LOGIC                                                                 07/18/2017 12:56:06 PAGE 9   

 488   1              timer1Init();
 489   1      #endif
 490   1          timer0Init();
 491   1      }
 492          void SendTo595(uint8_t val)
 493          {
 494   1              char i=0;
 495   1              uint8_t temp = val;
 496   1              EA = 0;
 497   1              for(i = 0; i < 8; i++)
 498   1              {
 499   2                      SER = temp>>7;
 500   2                      temp= temp<<1;
 501   2                      SCK = 0;
 502   2                      _nop_();
 503   2                      SCK = 1;
 504   2              }
 505   1              RCK = 0;
 506   1              _nop_();
 507   1              RCK = 1;
 508   1              SER = 0;
 509   1              EA = 1;
 510   1      }
 511          
 512          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2449    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =     41    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     23      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
