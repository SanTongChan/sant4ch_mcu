C51 COMPILER V9.01   REMOTE                                                                07/17/2017 23:00:21 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE REMOTE
OBJECT MODULE PLACED IN remote.obj
COMPILER INVOKED BY: F:\Program Files\Keil\C51\BIN\C51.EXE code\remote\remote.c BROWSE INCDIR(.\code\key;.\code\logic;.\
                    -code\timer;.\code\driver;.\code\led;.\code\common;.\code\flash;.\code\remote) DEBUG OBJECTEXTEND PRINT(.\remote.lst) OBJ
                    -ECT(remote.obj)

line level    source

   1          #include "remote.h"
   2          #include "N76E003.h"
   3          #include "led.h"
   4          #if 1
   5          sbit RF_PIN = P1^5;
   6          
   7          typedef struct
   8          {
   9                  uint8_t end_flag;
  10                  uint8_t sync_flag;
  11                  uint16_t sync_time;
  12                  uint16_t rf_data[48];
  13          }RecvData;
  14          static RecvData xdata recv_data = {0};
  15          
  16          IrData xdata ir_data = {0};
  17          
  18          static void getCaptureVal(uint16_t capture_value)
  19          {
  20   1              static uint8_t cnt = 0;
  21   1              if(!recv_data.sync_flag)
  22   1              {
  23   2                      if(capture_value >= 250 && RF_PIN == 1)
  24   2                      {
  25   3                              recv_data.sync_time = capture_value;
  26   3                              recv_data.sync_flag = true;
  27   3                              
  28   3                      }
  29   2              }
  30   1              else
  31   1              {
  32   2                      if(recv_data.sync_time > (capture_value * 5))
  33   2                      {
  34   3                              recv_data.rf_data[cnt] = capture_value;
  35   3                              cnt++;
  36   3                      }
  37   2                      else
  38   2                      {
  39   3                              recv_data.sync_flag = false;
  40   3                              cnt = 0;
  41   3                      }
  42   2                      if(cnt >= 48)
  43   2                      {
  44   3                              cnt = 0;
  45   3                              recv_data.end_flag = true;
  46   3                              recv_data.sync_flag = false;
  47   3                      }
  48   2              }
  49   1      
  50   1      }
  51          
  52          void clearIrData(void)
  53          {
C51 COMPILER V9.01   REMOTE                                                                07/17/2017 23:00:21 PAGE 2   

  54   1              ir_data.cnt = 0;
  55   1              ir_data.ir_data = 0;
  56   1              ir_data.sync_time = 0;
  57   1      }
  58          void analyzeRfData(void)
  59          {
  60   1              uint8_t i = 0;
  61   1              uint32_t temp = 0;
  62   1              uint16_t unit_time = 0;
  63   1              uint16_t temp_time = 0;
  64   1              uint16_t threshold_time = 0;
  65   1              uint16_t sync_threshold = 0;
  66   1              uint16_t short_time = 0;
  67   1              uint16_t long_time = 0;
  68   1              if(recv_data.end_flag == true)
  69   1              {
  70   2                      recv_data.end_flag = false;
  71   2                      if(ir_data.cnt == 0)
  72   2                      {
  73   3                              ir_data.high_time = recv_data.rf_data[0];
  74   3                              ir_data.low_time = recv_data.rf_data[1];
  75   3                              ir_data.sync_time = recv_data.sync_time;
  76   3                      }
  77   2                      unit_time = ir_data.high_time + ir_data.low_time;
  78   2                      threshold_time = unit_time / 5;
  79   2                      sync_threshold = ir_data.sync_time / 5;
  80   2                      for(i = 0; i < 48; i = i + 2)
  81   2                      {
  82   3                              temp_time = recv_data.rf_data[i] + recv_data.rf_data[i + 1];
  83   3                              if((temp_time > unit_time + threshold_time)
  84   3                                      || (temp_time < unit_time - threshold_time))
  85   3                              {
  86   4                                      ir_data.timer_cnt++;
  87   4                                      return;
  88   4                              }
  89   3                              if(recv_data.rf_data[i] > recv_data.rf_data[i + 1])
  90   3                              {
  91   4                                      temp = (temp << 1) | 0x01;
  92   4                                      short_time += recv_data.rf_data[i + 1];
  93   4                                      long_time += recv_data.rf_data[i];
  94   4                              }
  95   3                              else if(recv_data.rf_data[i] < recv_data.rf_data[i + 1])
  96   3                              {
  97   4                                      temp = temp << 1;
  98   4                                      long_time += recv_data.rf_data[i + 1];
  99   4                                      short_time += recv_data.rf_data[i];
 100   4                              }
 101   3                              else
 102   3                              {
 103   4                                      ir_data.timer_cnt++;
 104   4                                      return;
 105   4                              }
 106   3                      }
 107   2                      if(!(ir_data.sync_time < threshold_time + recv_data.sync_time
 108   2                              && ir_data.sync_time > recv_data.sync_time - threshold_time
 109   2                              && temp == ir_data.ir_data))
 110   2                      {
 111   3                              ir_data.sync_time = recv_data.sync_time;
 112   3                              ir_data.ir_data = temp;
 113   3                              ir_data.cnt = 1;
 114   3                              ir_data.timer_cnt = 0;
 115   3                              ir_data.low_time = (uint16_t)((short_time / 24) + 0.5);
C51 COMPILER V9.01   REMOTE                                                                07/17/2017 23:00:21 PAGE 3   

 116   3                              ir_data.high_time = (uint16_t)((long_time / 24) + 0.5);
 117   3                      }
 118   2                      else
 119   2                      {
 120   3                              ir_data.cnt++;
 121   3                              ir_data.timer_cnt = 0;
 122   3                      }
 123   2              }
 124   1              else
 125   1              {
 126   2                      ir_data.timer_cnt++;
 127   2              }
 128   1      }
 129          static void Timer2Init(void)
 130          {
 131   1              T2CON&=~0x01;
 132   1              T2MOD &= 0X0F;
 133   1              T2MOD|=0xD0;
 134   1              T2MOD|=0X08;    
 135   1      
 136   1              CAPCON0|=0x10;
 137   1              CAPCON1|=0x03;
 138   1              CAPCON1&=0xfe;
 139   1              //CAPCON2|=0x10;
 140   1              CAPCON3&=0xF0;
 141   1              CAPCON3|=0x08;
 142   1      }
 143          static void captureIOInit(void)
 144          {
 145   1              P1M1 &= 0xDF;
 146   1              P1M2 &= 0XDF;
 147   1      }
 148          void captureInit(void)
 149          {
 150   1              captureIOInit();
 151   1              Timer2Init();
 152   1              EIE |= 0X84;
 153   1              TR2 = 1;
 154   1      }
 155          void Capture_ISR (void) interrupt 12
 156          {
 157   1              uint16_t capture_val = 0;
 158   1              if(CAPCON0 & 0X01 )
 159   1              {
 160   2                      CAPCON0 &= ~0x01;
 161   2                      capture_val = C0H << 8 | C0L;   
 162   2                      getCaptureVal(capture_val);        
 163   2                      
 164   2              }
 165   1      }
 166          #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    976    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    114    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   REMOTE                                                                07/17/2017 23:00:21 PAGE 4   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
